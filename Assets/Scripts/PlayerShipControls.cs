//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerShipControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerShipControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerShipControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerShipControls"",
    ""maps"": [
        {
            ""name"": ""Helm"",
            ""id"": ""ca6d488c-078b-44c5-8815-8067160aac2d"",
            ""actions"": [
                {
                    ""name"": ""Turn"",
                    ""type"": ""Button"",
                    ""id"": ""f655c9ff-2b77-42d1-a836-f1eb39458c07"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sail Amount"",
                    ""type"": ""Button"",
                    ""id"": ""5874d460-2fb1-41f6-8249-98a303205495"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""89ee4dd2-6770-4eda-82ea-b70b722c148e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Toggle Manned Side"",
                    ""type"": ""Button"",
                    ""id"": ""30411dfc-1bca-493f-96fa-9509f9e18bf7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Change Ammo Type"",
                    ""type"": ""Button"",
                    ""id"": ""18bbeb0d-6b77-41d1-b645-0731565ad1f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""592456c1-7214-40d3-b996-756dee4a5a10"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""bb8abd90-c342-4b1c-ad67-9b0b3b5e2971"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""53c8894f-73f2-4704-92cf-033e6f975442"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""451753f6-6d40-4ba7-9f9a-0ac6c50ee7a8"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sail Amount"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""8219b46f-af41-4812-8d22-decd6bc82a8a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sail Amount"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b6f411e8-ade8-4d57-9848-1c7052e7924b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sail Amount"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""778fdb93-ac9c-4ad0-8c26-c57aaf2334f3"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""551a3c86-ed75-4c7e-a50d-ef5647d2bdff"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle Manned Side"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9203dfe9-90ea-4697-a4e5-f6dff59d0218"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change Ammo Type"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74646491-d732-4383-b4c5-a6103ca71c78"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change Ammo Type"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""84b243ec-405f-4bce-ba5b-7d12dc2ab368"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change Ammo Type"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ac8c8c6-697f-447e-8462-608aacd27b46"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change Ammo Type"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Helm
        m_Helm = asset.FindActionMap("Helm", throwIfNotFound: true);
        m_Helm_Turn = m_Helm.FindAction("Turn", throwIfNotFound: true);
        m_Helm_SailAmount = m_Helm.FindAction("Sail Amount", throwIfNotFound: true);
        m_Helm_Fire = m_Helm.FindAction("Fire", throwIfNotFound: true);
        m_Helm_ToggleMannedSide = m_Helm.FindAction("Toggle Manned Side", throwIfNotFound: true);
        m_Helm_ChangeAmmoType = m_Helm.FindAction("Change Ammo Type", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Helm
    private readonly InputActionMap m_Helm;
    private List<IHelmActions> m_HelmActionsCallbackInterfaces = new List<IHelmActions>();
    private readonly InputAction m_Helm_Turn;
    private readonly InputAction m_Helm_SailAmount;
    private readonly InputAction m_Helm_Fire;
    private readonly InputAction m_Helm_ToggleMannedSide;
    private readonly InputAction m_Helm_ChangeAmmoType;
    public struct HelmActions
    {
        private @PlayerShipControls m_Wrapper;
        public HelmActions(@PlayerShipControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Turn => m_Wrapper.m_Helm_Turn;
        public InputAction @SailAmount => m_Wrapper.m_Helm_SailAmount;
        public InputAction @Fire => m_Wrapper.m_Helm_Fire;
        public InputAction @ToggleMannedSide => m_Wrapper.m_Helm_ToggleMannedSide;
        public InputAction @ChangeAmmoType => m_Wrapper.m_Helm_ChangeAmmoType;
        public InputActionMap Get() { return m_Wrapper.m_Helm; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HelmActions set) { return set.Get(); }
        public void AddCallbacks(IHelmActions instance)
        {
            if (instance == null || m_Wrapper.m_HelmActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HelmActionsCallbackInterfaces.Add(instance);
            @Turn.started += instance.OnTurn;
            @Turn.performed += instance.OnTurn;
            @Turn.canceled += instance.OnTurn;
            @SailAmount.started += instance.OnSailAmount;
            @SailAmount.performed += instance.OnSailAmount;
            @SailAmount.canceled += instance.OnSailAmount;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @ToggleMannedSide.started += instance.OnToggleMannedSide;
            @ToggleMannedSide.performed += instance.OnToggleMannedSide;
            @ToggleMannedSide.canceled += instance.OnToggleMannedSide;
            @ChangeAmmoType.started += instance.OnChangeAmmoType;
            @ChangeAmmoType.performed += instance.OnChangeAmmoType;
            @ChangeAmmoType.canceled += instance.OnChangeAmmoType;
        }

        private void UnregisterCallbacks(IHelmActions instance)
        {
            @Turn.started -= instance.OnTurn;
            @Turn.performed -= instance.OnTurn;
            @Turn.canceled -= instance.OnTurn;
            @SailAmount.started -= instance.OnSailAmount;
            @SailAmount.performed -= instance.OnSailAmount;
            @SailAmount.canceled -= instance.OnSailAmount;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @ToggleMannedSide.started -= instance.OnToggleMannedSide;
            @ToggleMannedSide.performed -= instance.OnToggleMannedSide;
            @ToggleMannedSide.canceled -= instance.OnToggleMannedSide;
            @ChangeAmmoType.started -= instance.OnChangeAmmoType;
            @ChangeAmmoType.performed -= instance.OnChangeAmmoType;
            @ChangeAmmoType.canceled -= instance.OnChangeAmmoType;
        }

        public void RemoveCallbacks(IHelmActions instance)
        {
            if (m_Wrapper.m_HelmActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHelmActions instance)
        {
            foreach (var item in m_Wrapper.m_HelmActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HelmActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HelmActions @Helm => new HelmActions(this);
    public interface IHelmActions
    {
        void OnTurn(InputAction.CallbackContext context);
        void OnSailAmount(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnToggleMannedSide(InputAction.CallbackContext context);
        void OnChangeAmmoType(InputAction.CallbackContext context);
    }
}
